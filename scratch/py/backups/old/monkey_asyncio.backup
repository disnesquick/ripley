import asyncio
from asyncio import *
from asyncio import base_events
from asyncio import futures
from asyncio import tasks
from asyncio.base_events import _run_until_complete_cb, _StopError
import inspect

def _step(self, value=None, exc=None):
    assert not self.done(), \
        '_step(): already done: {!r}, {!r}, {!r}'.format(self, value, exc)
    if self._must_cancel:
        if not isinstance(exc, futures.CancelledError):
            exc = futures.CancelledError()
        self._must_cancel = False
    coro = self._coro
    self._fut_waiter = None

    containing_task = self.__class__._current_tasks.get(self._loop, None)
    self.__class__._current_tasks[self._loop] = self
    # Call either coro.throw(exc) or coro.send(value).
    try:
        if exc is not None:
            result = coro.throw(exc)
        elif value is not None:
            result = coro.send(value)
        else:
            result = next(coro)
    except StopIteration as exc:
        self.set_result(exc.value)
    except futures.CancelledError as exc:
        super().cancel()  # I.e., Future.cancel(self).
    except Exception as exc:
        self.set_exception(exc)
    except BaseException as exc:
        self.set_exception(exc)
        raise
    else:
        if isinstance(result, futures.Future):
            # Yielded Future must come from Future.__iter__().
            if result._blocking:
                result._blocking = False
                result.add_done_callback(self._wakeup)
                self._fut_waiter = result
                if self._must_cancel:
                    if self._fut_waiter.cancel():
                        self._must_cancel = False
            else:
                self._loop.call_soon(
                    self._step, None,
                    RuntimeError(
                        'yield was used instead of yield from '
                        'in task {!r} with {!r}'.format(self, result)))
        elif result is None:
            # Bare yield relinquishes control for one event loop iteration.
            self._loop.call_soon(self._step)
        elif inspect.isgenerator(result):
            # Yielding a generator is just wrong.
            self._loop.call_soon(
                self._step, None,
                RuntimeError(
                    'yield was used instead of yield from for '
                    'generator in task {!r} with {}'.format(
                        self, result)))
        else:
            # Yielding something else is an error.
            self._loop.call_soon(
                self._step, None,
                RuntimeError(
                    'Task got bad yield: {!r}'.format(result)))
    finally:
        if containing_task is None:
            self.__class__._current_tasks.pop(self._loop)
        else:
            self.__class__._current_tasks[self._loop] = containing_task
        self = None  # Needed to break cycles when an exception occurs.




def run_until_complete(self, future):
    """Run until the Future is done.

    If the argument is a coroutine, it is wrapped in a Task.

    WARNING: It would be disastrous to call run_until_complete()
    with the same coroutine twice -- it would wrap it in two
    different Tasks and that can't be good.

    Return the Future's result, or raise its exception.
    """
    self._check_closed()

    new_task = not isinstance(future, futures.Future)
    future = tasks.async(future, loop=self)
    if new_task:
        # An exception is raised if the future didn't complete, so there
        # is no need to log the "destroy pending task" message
        future._log_destroy_pending = False

    if self.is_running():
        try:
            while not future.done():
                self._run_once()
        except _StopError:
            pass
        return future.result()

    future.add_done_callback(_run_until_complete_cb)
    try:
        self.run_forever()
    except:
        if new_task and future.done() and not future.cancelled():
            # The coroutine raised a BaseException. Consume the exception
            # to not log a warning, the caller doesn't have access to the
            # local task.
            future.exception()
        raise
    future.remove_done_callback(_run_until_complete_cb)
    if not future.done():
        raise RuntimeError('Event loop stopped before Future completed.')

    return future.result()





#Apply the monkey patch
base_events.BaseEventLoop.run_until_complete = run_until_complete
tasks.Task._step = _step
# a neat helper function
def sync(future):
	return get_event_loop().run_until_complete(future)
